<?php
function motevia_field_info(){
	return array(
			'motevia_field_info' => array(
					'label' => t('Motevia'),
					'description' => t('This field stores the url to the file and the GPS information.'),
					'default_widget' => 'motevia_field_widget',
					'default_formatter' => 'motevia_field_formatter',
			),
	);
}

function motevia_field_widget_info(){
	return array(
			'motevia_field_widget' => array(
			  'label' => t('Motevia Widget'),
					'field types' => array('motevia_field_info'),
			),
	);
}

function motevia_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
	$value = isset($items[$delta]['motevia']) ? $items[$delta]['motevia'] : '';

	$widget = $element;
	$widget['#delta'] = $delta;

	switch ($instance['widget']['type']) {
		case 'motevia_field_widget':
			$components['url'] = array(
			'#type' => 'textfield',
			'#title' => t('Remote URL'),
			'#size' => 50,
			'#value_callback' => 'motevia_field_widget_value',
			);
			
			$components['submit'] = array(
					'#type' => 'submit',
					'#value' => t('Transfer'),
					'#validate' => array(),
					'#submit' => array('motevia_field_submit'),
			);
			break;
	}
	$element['motevia'] = $components;

	return $element;
}

function motevia_field_submit(&$form, &$form_state) {
// 	watchdog("State: ", print_r($form_state['input']['field_motevia']['und'][0]['motevia']['url'], true));
	$url = $form_state['input']['field_motevia']['und'][0]['motevia']['url'];
	$parents = array_slice($form_state['triggering_element']['#parents'], 0, -3);
	drupal_array_set_nested_value($form_state['input'], $parents, NULL);
	$form_state['rebuild'] = TRUE;
	motevia_field_curl($url);
}

function motevia_field_curl($url = null) {
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HEADER, TRUE);
	curl_setopt($ch, CURLOPT_NOBODY, TRUE);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HEADERFUNCTION, '_motevia_remote_parse_header');
	@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
	curl_exec($ch);
	$info = curl_getinfo($ch);
	curl_close($ch);
	
	if ($info['http_code'] != 200) {
		switch ($info['http_code']) {
			case 403:
				form_error($element, t('The remote file could not be transfered because access to the file was denied.'));
				break;
			case 404:
				form_error($element, t('The remote file could not be transfered because it was not found.'));
				break;
			default:
				form_error($element, t('The remote file could not be transfered due to an HTTP error (@code).', array('@code' => $info['http_code'])));
		}
		return;
	}
	$url = $info['url'];
	$url_info = parse_url($url);
	
	$filename = _motevia_remote_filename();
	if (empty($filename)) {
		$filename = rawurldecode(basename($url_info['path']));
	}
	
	$pathinfo = pathinfo($filename);
	$filename = motevia_clean_filename($filename, $field['settings']['file_extensions']);
	watchdog("FileName: ", $filename);
	watchdog("Temp Dir: ", $temporary_directory);
	$filepath = file_create_filename($filename, $temporary_directory);
	
	if (empty($pathinfo['extension'])) {
		form_error($element, t('The remote URL must be a file and have an extension.'));
		return;
	}
	
	$extensions = $field['settings']['file_extensions'];
	$regex = '/\.('. preg_replace('/[ +]/', '|', preg_quote($extensions)) .')$/i';
	if (!empty($extensions) && !preg_match($regex, $filename)) {
		form_error($element, t('Only files with the following extensions are allowed: %files-allowed.', array('%files-allowed' => $extensions)));
		return;
	}
	
	if (!empty($element['#upload_validators']['file_validate_size'][0])) {
		$max_size = $element['#upload_validators']['file_validate_size'][0];
		$file_size = $info['download_content_length'];
		if ($file_size > $max_size) {
			form_error($element, t('The remote file is %filesize exceeding the maximum file size of %maxsize.', array('%filesize' => format_size($file_size), '%maxsize' => format_size($max_size))));
			return;
		}
	}
	
	$options = array(
			'key' => $element['#entity_type'] . '_' . $element['#bundle'] . '_' . $element['#field_name'] . '_' . $element['#delta'],
			'filepath' => $filepath,
	);
	motevia_remote_set_transfer_options($options);
	
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HEADER, FALSE);
	curl_setopt($ch, CURLOPT_WRITEFUNCTION, '_motevia_remote_curl_write');
	@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);

	if (curl_exec($ch) && $file = motevia_save_file($filepath, $element['#upload_validators'], $element['#upload_location'])) {
		$item = array_merge($item, (array) $file);
	}
	curl_close($ch);
	@unlink($filepath);
}

function _motevia_remote_parse_header(&$ch, $header) {
	if (preg_match('/Content-Disposition:.*?filename="(.+?)"/', $header, $matches)) {
		// Content-Disposition: attachment; filename="FILE NAME HERE"
		_motevia_remote_filename($matches[1]);
	}
	elseif (preg_match('/Content-Disposition:.*?filename=([^; ]+)/', $header, $matches)) {
		// Content-Disposition: attachment; filename=file.ext
		_motevia_remote_filename($matches[1]);
	}

	// This is required by cURL.
	return strlen($header);
}

function motevia_remote_set_transfer_options($options = NULL) {
	static $current = FALSE;
	if (isset($options)) {
		$current = $options;
	}
	return $current;
}

function _motevia_remote_curl_write(&$ch, $data) {
	$progress_update = 0;
	$options = motevia_remote_get_transfer_options();

	if (curl_getinfo($ch, CURLINFO_SIZE_DOWNLOAD) / 65536 > $progress_update) {
		$progress_update++;
		$progress = array(
				'current' => curl_getinfo($ch, CURLINFO_SIZE_DOWNLOAD),
				'total' => curl_getinfo($ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD),
		);

		$cid = 'filefield_transfer:'. session_id() . ':' . $options['key'];
		if ($progress['current'] != $progress['total']) {
			cache_set($cid, $progress, 'cache', time() + 300);
		}
		else {
			cache_clear_all($cid, 'cache');
		}
	}

	$data_length = 0;
	if ($fp = @fopen($options['filepath'], 'a')) {
		fwrite($fp, $data);
		fclose($fp);
		$data_length = strlen($data);
	}

	return $data_length;
}

function motevia_save_file($filepath, $validators = array(), $destination = FALSE, $replace = FILE_EXISTS_RENAME) {
	global $user;

	$file = new stdClass();
	$file->uid      = $user->uid;
	$file->status   = 0;
	$file->filename = trim(basename($filepath), '.');
	$file->uri      = $filepath;
	$file->filemime = file_get_mimetype($file->filename);
	$file->filesize = filesize($filepath);

	$extensions = '';
	if (isset($validators['file_validate_extensions'])) {
		if (isset($validators['file_validate_extensions'][0])) {
			$extensions = $validators['file_validate_extensions'][0];
		}
		else {
			unset($validators['file_validate_extensions']);
		}
	}
	else {
		$extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
		$validators['file_validate_extensions'] = array();
		$validators['file_validate_extensions'][0] = $extensions;
	}

	if (!empty($extensions)) {
		$file->filename = file_munge_filename($file->filename, $extensions);
	}

	if (!variable_get('allow_insecure_uploads', 0) && preg_match('/\.(php|pl|py|cgi|asp|js)(\.|$)/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
		$file->filemime = 'text/plain';
		$file->uri .= '.txt';
		$file->filename .= '.txt';
		if (!empty($extensions)) {
			$validators['file_validate_extensions'][0] .= ' txt';
			drupal_set_message(t('For security reasons, your upload has been renamed to %filename.', array('%filename' => $file->filename)));
		}
		}
		
		if (empty($destination)) {
			$destination = 'temporary://';
		}
		
		$destination_scheme = file_uri_scheme($destination);
		if (!$destination_scheme || !file_stream_wrapper_valid_scheme($destination_scheme)) {
			drupal_set_message(t('The file could not be uploaded, because the destination %destination is invalid.', array('%destination' => $destination)), 'error');
			return FALSE;
		}
		
		if (substr($destination, -1) != '/') {
			$destination .= '/';
		}
		
		file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
		
		$file->destination = file_destination($destination . $file->filename, $replace);

		if ($file->destination === FALSE) {
			drupal_set_message(t('The file %source could not be uploaded because a file by that name already exists in the destination %directory.', array('%source' => $file->filename, '%directory' => $destination)), 'error');
			return FALSE;
		}
		
		$validators['file_validate_name_length'] = array();
		
		$errors = file_validate($file, $validators);
		
		if (!empty($errors)) {
			$message = t('The specified file %name could not be uploaded.', array('%name' => $file->filename));
			if (count($errors) > 1) {
				$message .= theme('item_list', array('items' => $errors));
			}
			else {
				$message .= ' ' . array_pop($errors);
				}
				drupal_set_message($message, 'error');
				return FALSE;
				}
				
				$file->uri = $file->destination;
				if (!file_unmanaged_copy($filepath, $file->uri)) {
					drupal_set_message(t('File upload error. Could not move uploaded file.'), 'error');
					watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->uri));
					return FALSE;
				}
				
				drupal_chmod($file->uri);
				
				if ($replace == FILE_EXISTS_REPLACE) {
					$existing_files = file_load_multiple(array(), array('uri' => $file->uri));
					if (count($existing_files)) {
						$existing = reset($existing_files);
						$file->fid = $existing->fid;
					}
				}
				
		return file_save($file);
}

function _motevia_remote_filename($curl_filename = NULL) {
	static $filename = NULL;
	if (isset($curl_filename)) {
		$filename = $curl_filename;
	}
	return $filename;
}

function motevia_remote_get_transfer_options() {
	return motevia_remote_set_transfer_options();
}

function motevia_clean_filename($filepath, $extensions) {
	global $user;

	$filename = basename($filepath);

	if (module_exists('transliteration')) {
		module_load_include('inc', 'transliteration');

		$langcode = NULL;
		if (!empty($_POST['language'])) {
			$languages = language_list();
			$langcode = isset($languages[$_POST['language']]) ? $_POST['language'] : NULL;
		}
		$filename = transliteration_clean_filename($filename, $langcode);
	}

	if (empty($extensions)) {
		$extensions = 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp';
	}
	$filename = file_munge_filename($filename, $extensions);
	$directory = drupal_dirname($filepath);
	return ($directory != '.' ? $directory . '/' : '') . $filename;
}
